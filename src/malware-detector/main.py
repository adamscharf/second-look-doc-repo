import os

import boto3
from aws_lambda_powertools.utilities.typing import LambdaContext
from aws_lambda_powertools.logging import correlation_paths
from aws_lambda_powertools import Tracer
from aws_lambda_powertools import Logger
from aws_lambda_powertools import Metrics

logger = Logger()
tracer = Tracer()
logger = Logger()
metrics = Metrics(namespace="PowertoolsSample")

s3_client = boto3.client("s3")
s3_bucket_name = os.environ.get("QuarantineBucketName")


# Enrich logging with contextual information from Lambda
@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST)
# Adding tracer
# See: https://docs.powertools.aws.dev/lambda-python/latest/core/tracer/
@tracer.capture_lambda_handler
# ensures metrics are flushed upon request completion/failure and capturing ColdStart metric
@metrics.log_metrics(capture_cold_start_metric=True)
def lambda_handler(event: dict, context: LambdaContext) -> dict:
    logger.info("Lambda called!")

    logger.info(f"Lambda context: {context}")
    logger.info(f"Lambda event: {event}")

    logger.info(f"Listing contents of the {s3_bucket_name} S3 Bucket")
    logger.info(f"{s3_client.list_objects(Bucket=s3_bucket_name)}")

    return {"malwareStatus": "CLEAN"}
